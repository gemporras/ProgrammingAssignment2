sample
#given in instructions
makeVector <- function(x = numeric()) {
  m <- NULL
  set <- function(y) {
    x <<- y
    m <<- NULL
  }
  get <- function() x
  setmean <- function(mean) m <<- mean
  getmean <- function() m
  list(set = set, get = get,
       setmean = setmean,
       getmean = getmean)
}

cachemean <- function(x, ...) {
  m <- x$getmean()
  if(!is.null(m)) {
    message("getting cached data")
    return(m)
  }
  data <- x$get()
  m <- mean(data, ...)
  x$setmean(m)
  m
}

#step 1 making a function for a matrix that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
  g <- NULL
  set <- function(y){
    x <<- y
    g <<- NULL
  }
  get <- function()x
  
  setInverse <- function(inverse) g <<- inverse
  getInverse <- function() g 
  list(set = set, get = get, 
       setInverse = setInverse, 
       getInverse = getInverse)
}

#Step 2 inverse the matrix, this function should return the inverse of the matrix made by the makecachematrix function previously made

cacheSolve <- function(x, ...) {
  
  g <- x$getInverse()
  if(!is.null(g)){
    message("getting cached data")
    return(g)
  }
  mat <- x$get()
  g <- solve(mat,...)
  x$setInverse(g)
  g
}

#testing
test_Matrix <- makeCacheMatrix(matrix(1:8, 4,4))
test_Matrix$get()
test_Matrix$getinverse()
cacheSolve(test_Matrix)

